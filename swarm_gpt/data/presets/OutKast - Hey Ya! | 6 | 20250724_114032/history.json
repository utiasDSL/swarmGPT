[{"role": "system", "content": "You're a helpful assistant that will help a human choreograph a dance for a swarm of small drones."}, {"role": "user", "content": "Generate the trajectories for a choreography for 6 drones dancing to the music of the song OutKast - Hey Ya!. The trajectories are defined by coordinate waypoints that the drones fly to. Each movement can be defined by multiple template functions, which are explained below.\n# Information on the song: - Name: OutKast - Hey Ya! - Number of beats: 12 - Beat times in 100ms: {1: 2, 2: 25, 3: 51, 4: 78, 5: 108, 6: 131, 7: 168, 8: 191, 9: 214, 10: 251, 11: 289, 12: 327} - Beat intervals in 100ms: {1: 2, 2: 23, 3: 26, 4: 26, 5: 30, 6: 23, 7: 38, 8: 23, 9: 23, 10: 38, 11: 38} - Beat amplitude in dBFS: {1: -8, 2: -10, 3: -10, 4: -11, 5: -10, 6: -8, 7: -8, 8: -10, 9: -8, 10: -7, 11: -11, 12: -10} - Beat novelty in %: {1: 89, 2: 54, 3: 69, 4: 89, 5: 53, 6: 79, 7: 90, 8: 50, 9: 77, 10: 85, 11: 80, 12: 100} - Beat chords: {1: 'C', 2: 'C', 3: 'G', 4: 'Em', 5: 'C', 6: 'Em', 7: 'Em', 8: 'C', 9: 'C', 10: 'Em', 11: 'C', 12: 'Em'}\n# Information on the drones: - Number: 6 - Drones must not collide with each other. No two drones must be at the same coordinates at the same beat. - Starting positions: [[-50, -50, 100], [-100, 0, 100], [-50, 50, 100], [50, -50, 100], [100, 0, 100], [50, 50, 100]] - Maximum step distance between waypoints in cm: {1: 20, 2: 226, 3: 264, 4: 264, 5: 302, 6: 228, 7: 376, 8: 228, 9: 226, 10: 376, 11: 378, 12: 378} - Lower limit for generated waypoints: [-2000. -2000. -2010.] - Upper Limit for generated waypoints: [2000 2000 2000]\n# Information on the environment: - The drones are limited to [-200, 200] in x, [-200, 200] in y, [0, 200] in z - The drones must not touch the ground, i.e. their z coordinate must always be greater than 0  \n# Information on the choreography: - The drone choreography must have 12 waypoints, one for each beat. - Each drone must move at least once during the song. - Movements must depend on the beats of the song. If the beats are loud and novel, all drones must move. - If possible, coordinates for the drones should be symmetrical at each beat. - Successive waypoints should form patterns for single drones and for the whole swarm - Coordinates are given in cm. A drone flying at 1m height will have a z coordinate of 100. - The difference between two waypoints must be less than the maximum step distance in each dimension.\n  E.g. if the maximum step distance between beat 3 and 4 is 50, the difference between the x, y,\n  z coordinates of the waypoints at beat 3 and 4 must be less than 50 in each dimension.\n\n# Information on template functions: Make sure to limit actions to each drone once per time step. So if you choose swap for (1, 2) then you can only choose swap(3, 4) or  two seperate move functions for each drone 2: time dependent template functions ( For such functions we need only one function call for one time step) - rotate:\n    takes 2 parameters ( angle, axis ), and rotates all drones by 'angle' along 'axis'\n     #angle is a float between [0, 360]\n     #axis is one of 'x', 'y', or 'z', but for now always rotate around 'z'\n  eg\n    rotate(30, z)\n4: variadic functions ( such function takes a list with drone ids as arguments ) - center:\n    Takes a list of drone IDs as input. It calculates the geometric center of the current positions of these specified drones and then moves all the drones with the matching IDs to this calculated center position.\n  eg\n    center([1, 2, 3])\n- move_z:\n    Takes a list of drone IDs as input, and distance. It moves all the drones with the matching IDs along z axis by xcm. if distance is positive, it moves them up, otherwise down\n  eg\n    move_z([1, 2, 3], 10)\n- form_circle\n    Takes a list of drone IDs as input, and z coordinate ( height ) for the circle formation. Radius of circle is decided by number of drones in list argument. So bigger circle for more drones.\n    # height has to be greater than zero\n  eg \n    # Cone formation as 4 drones are at 150cm height, and 3 drones are at 50cm height with smaller radius as less drones.\n    form_circle( [1, 2, 3, 4], 150 ), form_circle( [5, 6, 7], 50 )\n- form_star\n    Takes 3 parameters ( height, spacing, delta_radius ) and creates a star in the z-plane, which is defined by 2 concentric circles in staggered angles with different radii. \n    Height corresponds to the height of the star. Spacing corresponds to the minimum spacing between drones, where a higher spacing means larger star. \n    Delta_radius corresponds to the difference of the 2 radii, where a larger delta_radius means a more spread out star\n    #height has to be greater than zero\n    #spacing is an integer between [40, 80]\n    #delta_radius is an integer between [50 100]\n  eg \n    form_star( 120, 60, 50 )\n- form_cone\n    Takes 3 parameters ( delta_height, spacing, is_inverted ) and creates a cone using concentric circles of different radii. Each layer has 4 additional drones.\n    Delta_height is the difference in height between layers. A larger delta_height corresponds to a taller cone.\n    Spacing is the minimum_spacing between drones of a layer. A larger spacing means a larger circle radius and wider cone.\n    Is_inverted is a boolean value (an integer of 0 or 1) that determines if the cone is inverted or not. Inverted cones are more expressive and dynamic. \n    #delta_height is an integer between [30, 80]\n    #spacing is an integer between [40, 80]\n    #is_inverted is an integer with the values 0 or 1\n  eg \n    form_star( 120, 60, 50 )\n\n\n5: multi time dependent functions ( For such functions we need only one function call for multiple time steps)\n  Any multi-time dependent function needs to be followed by the 'PLAN' keyword for the number of steps minus 1. This means, for functions that span over `step` time steps, the function call must be followed by `step - 1` occurrences of 'PLAN'.\n  These functions must be initiated `s - step + 1` beats before the last beat, where `s` is the total number of beats. This ensures that the multi-time function completes before the song ends.\n\n**Important Timing Constraint**: If you have a multi-time function that takes 3 steps, it must be called at least 2 steps before the last beat to allow for the necessary 'PLAN' steps. For example, with a 22-beat song, a 3-step function should be called by the 20th beat, followed by 'PLAN' for the 21st and 22nd beats. - spiral:\n    takes 2 parameters ( steps, height ), and makes all drones move in a outward spiral pattern with the calculate radius ( from no of drones ), and number of steps at height h\n\n     #steps is an integer between [2, 3]\n     #height is an integer between [0, 200] that determines the height of the spiral\n     #Since spiral is a multi time dependent function, it should be falled by 'PLAN' keyword for the number of steps -1 times, so if steps is 3, then spiral is called once, and PLAN follows twice in output\n     # spiral needs to be called atleast 's' steps before last timestep as 's' PLAN follow the spiral call\n     eg:\n      1: spiral(3, 50 )\n      2: PLAN\n      3: PLAN\n\n- spiral_speed:\n    Takes 4 parameters (steps, height, speed, radius_increase), and has the same effect as spiral. The difference is that spiral_speed increases the radius of the spiral by radius_increase over the number of steps. In addition,\n    speed defines the angle by which the drones rotate around the center. Lower speeds results in slower drone motions.\n    # Steps is an integer between [2, 3]\n    # height is an integer between [0, 200] that determines the height of the spiral\n    # speeds is an integer between [0, 360] that defines the angle by which the drones rotate around the center. Very low speeds are in the range of 0 to 90, fast speeds are in the range of 100 to 360\n    # radius_increase is a float between [1, 3] that increases the radius of the spiral over the number of steps\n\n- helix:\n    takes 2 parameters ( steps, delta_h, height ), and makes all drones move in a helix pattern with the calculate radius ( from no of drones ), and number of steps.\n\n    #steps is an integer between [2, 3]\n    #delta_h is an integer between [0, 100], that changes the height of drones in the helix pattern per step\n    #height is between [50, 100] as helix rises up with steps, lets be safe.\n    #Since helix is a multi time dependent function, it should be falled by 'PLAN' keyword for the number of steps -1 times, so if steps is 3, then helix is called once, and PLAN follows twice in output\n    eg:\n      1: helix(3, 20, 50)\n      2: PLAN\n      3: PLAN\n\n- twister:\n    takes 3 parameter ( steps, omega, z_spacing ), and makes all drones move into a upside down cone pattern and rotate at the speed specified by omega, for the number of steps specified.\n    Z_spacing corresponds to the height difference between neighbouring drones, where a smaller z_spacing corresponds to a more compact cone.\n\n    #steps is an integer between [2, 3]\n    #omega is an integer between [2, 20] with a higher omega corresponding to a more dynamic performance.\n    #z_spacing is an integer between [5, 30]\n    #Since twister is a multi time dependent function, it should be falled by 'PLAN' keyword for the number of steps -1 times, so if steps is 3, then conic_rotate is called once, and PLAN follows twice in output\n    eg:\n      1: twister(3, 20, 10)\n      2: PLAN\n      3: PLAN\n\n- zig_zag:\n    Moves all drones in a zigzag pattern. Takes 3 parameters\n    Parameters: `steps` (int), `delta` (int) - the horizontal displacement per step, `delta_h` (int) - the vertical displacement per step.\n    eg:\n      4: zig_zag(3, 20, 10)\n      5: PLAN\n      6: PLAN\n    \n- wave:\n    Moves all drones in a three-dimensional wave propagating through a two-dimensional rectangular elastic surface with bounded edges. The disturbance at any point on the surface is defined by its parameters in space and time, and the wave propagation is governed by the wave equation with a speed `c > 0`. Takes 5 parameters.\n    Parameters:\n      - `steps` (int): The number of discretization points.\n      - `height` (float): The desired height of drones above the surface.\n      - `mu_pairs` (list of list): List of \\((\u03bc1, \u03bc2)\\) pairs that define the spatial frequencies.\n      - `a\u00b51\u00b52` (list of floats): List of amplitude coefficients corresponding to each \\((\u03bc1, \u03bc2)\\) pair for the sine component.\n      - `b\u00b51\u00b52` (list of floats): List of amplitude coefficients corresponding to each \\((\u03bc1, \u03bc2)\\) pair for the cosine component.\n    eg:\n      4: wave( 4, 10, [[1, 1], [2, 2]], [0.5, 0.3], [0.2, 0.4] )\n      5: PLAN\n      6: PLAN\n      7: PLAN\n    latex equn for the concerned wave equation:\n      The disturbance \\(u(s, t)\\) at any point \\(s = (s_1, s_2) \\in [0, a] \\times [0, b]\\) \nat time \\(t\\) is governed by:\n\\[\nc^2 \\nabla^2 u(s, t) = \\frac{\\partial^2 u(s, t)}{\\partial t^2},\n\\]\nwhere \\( \\nabla^2 \\) is the spatial Laplacian and \\(c > 0\\) is the wave speed. \nThe solution:\n\\[\nu(s, t) = \\sum_{(\\mu_1, \\mu_2)} a_{\\mu_1 \\mu_2} \\sin \\left( \\frac{\\mu_1 \\pi s_1}{a} \\right) \n\\sin \\left( \\frac{\\mu_2 pi s_2}{b} \\right) \\sin(\\omega_{\\mu_1 \\mu_2} t) \n+ b_{\\mu_1 \\mu_2} \\sin \\left( \\frac{\\mu_1 \\pi s_1}{a} \\right) \n\\sin \\left( \\frac{\\mu_2 \\pi s_2}{b} \\right) \\cos(\\omega_{\\mu_1 \\mu_2} t),\n\\]\n\nwith frequencies:\n\n\\[\n\\omega_{\\mu_1 \\mu_2}^2 = c^2 \\pi^2 \\left( \\frac{\\mu_1^2}{a^2} + \\frac{\\mu_2^2}{b^2} \\right).\n\\]\n\nPLAN can also be used to indicate that the drones should maintain their current position for the next beat, so after forming cone formation, you can use PLAN to maintain the formation for next beat. Using `PLAN` also counts as part of the waypoints for the drones, so you can't have multi-time dependent functions as the last waypoint as we need to have `PLAN` after them in future steps.\n# Patterns: - Drones must fly in geometric patterns and shapes - Drones must fly in tight formations - The formations must be symmetrical if possible - Drones should move up and down in altitude multiple times for a 3D effect - Example patterns include spirals, triangles, squares, circles, lines\n# Response structure First, describe the emotions and mood associated with the song OutKast - Hey Ya!. Then, give a description of the dominant chords of the song. Is it a major or minor cord? What does that mean for the mood? Next, give a specific description of the choreography you want to create. What patterns do you want the drones to fly? Why do you use these particular patterns? Last, fill out the individual waypoints for each drone. Adapt the distance and position of waypoints to the amplitude of the song's beats. Loud beats lead to larger movements, while soft beats lead to smaller movements. Furthermore, take into account the dominant chords of the song and the emotions and mood associated with these chords. Try to use a variety of functional options to design an amazing geometrical choreography. Make sure to only do motion planning per beat, so in otherwords motion planning steps should be limited to 12,and end yaml output with END like in examples below. You can use multiple beat functions for more than 3 timestep as well like spiral(), zig_zag(), wave(), helix(). Only do complex primtives. Adjust change in height accordingly like do them for 5 steps if you have to, and make height increments small. Limit to at max 4 primitives. Between any two primitives, there must be a extra PLAN which consumes a timestep so that there is enough time for transition.\n"}, {"role": "system", "content": "# Example prompts and responses - Example 1:\n  Prompt:\n    # Information on the song:\n    - Name: r\u00eaverie\n    - Number of beats: 22\n    - Beat times in 100ms: {{1: 7, 2: 20, 3: 29, 4: 41, 5: 55, 6: 66, 7: 80, 8: 96, 9: 104, 10: 112, 11: 119, 12: 128, 13: 137, 14: 147, 15: 157, 16: 167, 17: 187, 18: 196, 19: 210, 20: 221, 21: 232, 22: 242}}\n    - Beat intervals in 100ms: {{1: 7, 2: 13, 3: 9, 4: 12, 5: 14, 6: 11, 7: 13, 8: 16, 9: 9, 10: 7, 11: 8, 12: 8, 13: 9, 14: 10, 15: 10, 16: 10, 17: 20, 18: 8, 19: 14, 20: 12, 21: 10}}\n    - Beat amplitude in dBFS: {{1: -53, 2: -40, 3: -40, 4: -39, 5: -44, 6: -44, 7: -36, 8: -43, 9: -34, 10: -35, 11: -37, 12: -37, 13: -39, 14: -44, 15: -38, 16: -32, 17: -35, 18: -34, 19: -33, 20: -37, 21: -35, 22: -38}}\n    - Beat novelty in %: {{1: 37, 2: 52, 3: 24, 4: 31, 5: 40, 6: 98, 7: 45, 8: 21, 9: 76, 10: 72, 11: 52, 12: 29, 13: 10, 14: 15, 15: 81, 16: 100, 17: 27, 18: 65, 19: 64, 20: 28, 21: 19, 22: 30}}\n    - Beat chords: {{: 'A#m', 2: 'Cm', 3: 'Cm', 4: 'Cm', 5: 'Cm', 6: 'Cm', 7: 'Cm', 8: 'A#m', 9: 'C', 10: 'C', 11: 'C', 12: 'C', 13: 'Cm', 14: 'Cm', 15: 'Gm', 16: 'A#m', 17: 'Gm', 18: 'Gm', 19: 'Gm', 20: 'F', 21: 'F', 22: 'F'}}\n  \n    # Information on the drones:\n    - Number: 3\n    - Drones must not collide with each other. No two drones must be at the same coordinates at the same beat.\n    - Starting positions: [[100, 100, 100], [-100, 100, 100], [0, -100, 100]]\n    - Maximum step distance between waypoints in cm: 100cm\n\n  Response:\n    song_mood: Debussy's R\u00e9verie is a short and expressive piano piece that captures the essence of daydreaming and contemplation.\n      It is characteristic of Debussy's impressionistic style, known for its use of unconventional harmonies, tonal colors, and fluidity.\n    cord_analysis: The song is in the key of F major, with a few chords in the song being A#m, Cm, G, F, and Gm. The mix of major and minor chords indicates that the music is neither elated nor gloomy. It remains in a state of contemplation and daydreaming, with a touch of melancholy.\n    choreography_plan: The main intention of the choreography is to reflect the dreamy and contemplative mood of the song. Therefore, drones must not move too fast, and waypoints must not be too far from each other. \n      The beat amplitude in dBFS roughly remains within the -50 to -30 interval, indicating that the song is very quiet. Consequently, the drones should move slowly and gently. Across all beats, the intervals are evenly spaced around 7 to 13, indicating that the drones should move at a steady pace.\n      so we have no pause that we have to accentuate in the choreography. We will therefore focus on the beat amplitude.\n      For beats 1 to 5, the three drones will spiral to a center point around [0, 0, 100]]. The novelty of the beats is low to moderate at around 25 to 50, and the beat amplitude is also low at around -50 to -40. Thus, we plan the first waypoints closer to each other.\n      For the following beats 6 to 11, the novelty of the beats reaches a peak at 98 and a slightly raised beat amplitude of up to -35. To account for the peak, one drone will rise slowly in the center while the other two drones begin to slowly rotate in the other direction and then move outwards. We let the drones move slowly because the amplitude has not yet reached full force. We change the direction of the drones to reflect the dreamy and swirling mood of the song.\n      For the next beats 12 to 17, the novelty and amplitudes of the beats are reaching the peak. Accordingly, the drones will move into the triangle formation again, while oscillating in altitude. Although we now move faster, we adhere to the maximum step distance of approximately 80 to 100cm.\n      Beats 18 to 22 are the final beats of the song, with decreasing novelty and amplitude. The drones will slowly spiral outwards and downwards to mark the decline in tension and the end of the dance.\n    choreography:\n      1: spiral(5, 100)\n      2: PLAN\n      3: PLAN\n      4: PLAN\n      5: PLAN\n      6: PLAN # extra PLAN for primitive switch\n      7: rotate(60, z)\n      8: PLAN # extra\n      9: rotate(-90, z)\n      10: PLAN # extra\n      11: move_z( [1,2,3], 30)\n      12: PLAN # extra\n      13: spiral(4, 100)\n      14: PLAN\n      15: PLAN\n      16: PLAN\n      17: PLAN # extra\n      18: zig_zag(5, 20, 20)\n      19: PLAN\n      20: PLAN\n      21: PLAN \n      22: PLAN\n      END\n"}, {"role": "system", "content": "The output should be a YAML string in the following format:  \n```yaml\n  song_mood: str  # Description of the emotions and mood associated with the song\n  cord_analysis: str  # Description of the dominant chords and how they relate to the song\n  choreography_plan: str  # Description of the planned choreography and how it relates to the song\n  choreography:  # Waypoints for the drones at each beat in the song. Drones are indexed from x_1 to x_n\n    1: form_circle( [1, 2, 3 ..., n], 100 )\n    2: PLAN # extra PLAN for switch\n    3: center([1, 2, 3]); ... ; center([n-1, n] )\n    ... \n    num_beats: move(drone_1_x, drone_1_y, drone_1_z, 1); move(...); move(drone_n_x, drone_n_y, drone_n_z, n)  # m'th waypoint planning\n    END  \n```\n, where x_n is the number of drones and the waypoint list length is equal to the number of beats num_beats in the song. It is important you never skip beats and always provide the full list of waypoints for each drone! Never skip lines with ... !\n"}, {"role": "assistant", "content": "```yaml\nsong_mood: \"OutKast's 'Hey Ya!' is an energetic, upbeat, and funky song. It's known for its lively rhythm, catchy beats, and infectious energy. The song conveys a fun and carefree vibe, encouraging listeners to dance and enjoy the moment.\"\ncord_analysis: \"'Hey Ya!' primarily revolves around the chords C, G, and Em, which are major and minor chords. These chords contribute to a mix of happy and slightly melancholic tones, adding depth to the overall lively and upbeat feel of the song.\"\nchoreography_plan: \"The choreography for the drones will reflect the energetic and lively mood of the song. Drones will perform dynamic and symmetrical movements, creating geometric patterns and shapes. The use of multi-time dependent functions like spiral and wave will add to the complexity and beauty of the performance. Movements will be larger and more expressive on louder and novel beats to match the song's intensity.\"\nchoreography:\n  1: form_circle([1, 2, 3, 4, 5, 6], 100)\n  2: PLAN  # extra PLAN for switch\n  3: form_cone(3, 60, 0)\n  4: PLAN  # extra PLAN for switch\n  5: rotate(90, 'z')\n  6: PLAN  # extra PLAN for switch\n  7: spiral(3, 120)\n  8: PLAN\n  9: PLAN\n  10: PLAN  # extra PLAN for switch\n  11: wave(3, 150, [[1,1],[2,2]], [0.5, 0.4], [0.3, 0.4])\n  12: PLAN\n  13: PLAN\n  END\n```"}]